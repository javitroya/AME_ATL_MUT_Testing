module BibTeX2DocBook;
create OUT : DocBook from IN : BibTeX;


-------------------------------------------------------------------------------
-- HELPERS --------------------------------------------------------------------
-------------------------------------------------------------------------------

-- This helper builds the set of distinct authors referenced in the input BibTeX
-- model.
-- Built set is sorted by author name.
-- RETURN: Sequence(BibTeX!Author)
helper def: authorSet : Sequence(BibTeX!Author) = BibTeX!Author.allInstances()->iterate(e; ret : Sequence(BibTeX!Author) = Sequence {} |
				if ret->collect(e | e.author)->includes(e.author) then
					ret
				else
					ret->including(e)
				endif
			)->sortedBy(e | e.author);

-- This helper builds the set of distinct titles referenced in the input BibTeX
-- model.
-- Built set is sorted by title.
-- RETURN: Sequence(BibTeX!TitledEntry)
helper def: titledEntrySet : Sequence(BibTeX!TitledEntry) = BibTeX!TitledEntry.allInstances()->iterate(e; ret : Sequence(BibTeX!TitledEntry) = Sequence {} |
				if ret->collect(e | e.title)->includes(e.title) then
					ret
				else
					ret->including(e)
				endif
			)->sortedBy(e | e.title);

-- This helper builds the set of distinct journals referenced in the input BibTeX
-- model.
-- Built set is sorted by journal name.
-- RETURN: Sequence(BibTeX!Article)
helper def: articleSet : Sequence(BibTeX!Article) = BibTeX!Article.allInstances()->iterate(e; ret : Sequence(BibTeX!Article) = Sequence {} |
				if ret->collect(e | e.journal)->includes(e.journal) then
					ret
				else
					ret->including(e)
				endif
			)->sortedBy(e | e.journal);

-- This helper builds a string containing all information on a given BibTeXEntry.
-- Content of the generated string depends on the entry type.
-- IN: BibTeX!BibTeXEntry
-- RETURN: Sequence(BibTeX!Author)
helper context BibTeX!BibTeXEntry def: buildEntryPara() : String =
	'[' + self.id + ']'
	+ ' ' + self.oclType().name
	+ (if self.oclIsKindOf(BibTeX!TitledEntry) then ' ' + self.title else '' endif)
	+ (if self.oclIsKindOf(BibTeX!AuthoredEntry) 
	   then self.authors->iterate(e; str : String = '' | str + ' ' + e.author)
	   else ''
	   endif)
	+ (if self.oclIsKindOf(BibTeX!DatedEntry) then ' ' + self.year else '' endif)
	+ (if self.oclIsKindOf(BibTeX!BookTitledEntry) then ' ' + self.booktitle else '' endif)
	+ (if self.oclIsKindOf(BibTeX!ThesisEntry) then ' ' +  self.school else '' endif)
	+ (if self.oclIsKindOf(BibTeX!Article) then ' ' + self.journal else '' endif)
	+ (if self.oclIsKindOf(BibTeX!Unpublished) then ' ' + self.note else '' endif)
	+ (if self.oclIsKindOf(BibTeX!Book) then ' ' + self.publisher else '' endif)
	+ (if self.oclIsKindOf(BibTeX!InBook) then ' ' + self.chapter.toString() else '' endif)
	;

-------------------------------------------------------------------------------
-- RULES ----------------------------------------------------------------------
-------------------------------------------------------------------------------

-- R1
-- Rule 'Main'
-- This rule generates the structure of the DocBook model from a BibTeXFile element
-- src_BibTeXFile, src_BibTeXEntry, src_Author, src_TitledEntry, src_Article,
-- trg_DocBook, trg_Book.books_Book_DocBook, trg_Book, trg_Book.articles_Article_Book, trg_Article, trg_Article.title,
-- trg_Article.sections_1_Article_Sect1, trg_Sect1, trg_Sect1.title, trg_Sect1.paras_Sect1_Para


-- R2
-- Rule 'Author'

-- R3
-- Rule 'UntitledEntry'
-- This rule generates a section_1 paragraph for each untitled entry.
-- src_BibTeXEntry, src_TitledEntry, trg_Para, trg_Para.content
abstract rule UntitledEntry {
	from
		e : BibTeX!BibTeXEntry
	to
		p : DocBook!Para (
			content <- 'hola'
		)
}

rule un2 extends UntitledEntry {
	from
		e : BibTeX!MasterThesis
	to
		p : DocBook!Para (
			content <- 'hola2'	
		)
}

-- @atlcompiler emftvm

module SecondOrderHOT;
create OUT : ATL refining IN : ATL, IN_MM : IN_MM, OUT_MM : OUT_MM;

helper def : random() : Real =
	"#native"!"java::util::Random".newInstance().nextDouble();

-- A StringExp is one of the types that can conform to the value part of a Binding
-- Since the generic mutation transformation adds 'CompleteIt_IM' in the value part,
-- a StringExp is created, whose stringSymbol is 'Complete_IPE'
rule CompleteInMMNames {
	from s : ATL!StringExp (s.stringSymbol = 'Complete_IPE')
	using {
		classes : Sequence(IN_MM!EClass) = IN_MM!EClass.allInstancesFrom('IN_MM')->select(c|not c.abstract);
	}
	to t : ATL!StringExp(
		-- The idea is to have in the following a random class from the input model
		stringSymbol <- classes->at((thisModule.random()*classes->size()).floor()+1).name
	)
	do{
		classes->at((thisModule.random()*classes->size()).floor()+1).name;
	}
}

-- rule AddBindingNames {
--	from b : ATL!StringExp (
--		b.stringSymbol = 'NewBinding_PropertyName'
--	)
--	using{
--		classes : Sequence(OUT_MM!EClass) = OUT_MM!EClass.allInstancesFrom('OUT_MM') -> select(c | c.getESuperTypes() -> size() <= 0);
--	}
--	to b2 : ATL!StringExp ( 
--		stringSymbol <- classes -> first().getEStructuralFeatures() ->  select (c | c.getEType().name = 'String') -> last().name
--	)	
--}

rule AddBindingReferencePropertyName{
	from a : ATL!StringExp(
		a.stringSymbol = 'NewBinding_PropertyName'	
	)
	using{
		classes2 : Sequence(OUT_MM!EClass) = OUT_MM!EClass.allInstancesFrom('OUT_MM');
	}
	to a2 : ATL!StringExp ( 
		stringSymbol <- classes2 -> first().getEStructuralFeatures() -> select (c | c.getEType().name = classes2 -> last().name) -> last().name
	)
	
}

rule AddBindingReferenceValue{
	from a : ATL!StringExp(
		a.stringSymbol = 'testvariable'	
	)
	using{
		classes : Sequence(OUT_MM!EClass) = OUT_MM!EClass.allInstancesFrom('OUT_MM');
		classT1 : OUT_MM!EClass = OUT_MM!EClass.allInstancesFrom('OUT_MM') -> first();
		featureB : OUT_MM!EStructuralFeature = classT1.getEStructuralFeatures() -> select (c | c.getEType().name = classes -> last().name) -> last();
		typeB : OUT_MM!EClass = featureB.getEType();
		
	}
	to a2 : ATL!StringExp(
		stringSymbol <- typeB.name
	)
}

rule AddBindingReferenceValue2{
	from a : ATL!StringExp(
		a.stringSymbol = 'testname'	
	)
	using{
		classes : Sequence(OUT_MM!EClass) = OUT_MM!EClass.allInstancesFrom('OUT_MM');
		classT1 : OUT_MM!EClass = OUT_MM!EClass.allInstancesFrom('OUT_MM') -> first();
		featureB : OUT_MM!EStructuralFeature = classT1.getEStructuralFeatures() -> select (c | c.getEType().name = classes -> last().name) -> last();
		typeB : OUT_MM!EClass = featureB.getEType();
		
	}
	to a2 : ATL!StringExp(
		stringSymbol <- typeB.name
	)
}





	

-- @atlcompiler emftvm

module SecondOrderHOT;
create OUT : ATL refining IN : ATL, IN_ATL : IN_ATL, IN_MM : IN_MM,  OUT_MM : OUT_MM;


helper def : getSuperTypeOf(typeName : String) : ATL!EClass = 
	if (OUT_MM!EClass.allInstancesFrom('OUT_MM') -> select(c | c.name = typeName).eAllGenericSuperTypes.size > 0) then 
		OUT_MM!EClass.allInstancesFrom('OUT_MM') -> select(c | c.name = typeName).eAllGenericSuperTypes -> last()
	else
		OUT_MM!EClass.allInstancesFrom('OUT_MM') -> select(c | c.name = typeName).first()
	endif;

-- A StringExp is one of the types that can conform to the value part of a Binding
-- Since the generic mutation transformation adds 'CompleteIt_IM' in the value part,
-- a StringExp is created, whose stringSymbol is 'Complete_IPE'
rule CompleteInMMNames {
	from s : ATL!StringExp (s.stringSymbol = 'Complete_IPE')
	using {
		classes : Sequence(IN_MM!EClass) = IN_MM!EClass.allInstancesFrom('IN_MM')->select(c|not c.abstract);
	}
	to t : ATL!StringExp(
		-- The idea is to have in the following a random class from the input model
		stringSymbol <- classes->at((thisModule.random()*classes->size()).floor()+1).name
	)
	do{
		classes->at((thisModule.random()*classes->size()).floor()+1).name;
	}
}



-- rule AddBindingNames {
--	from b : ATL!StringExp (
--		b.stringSymbol = 'NewBinding_PropertyName'
--	)
--	using{
--		classes : Sequence(OUT_MM!EClass) = OUT_MM!EClass.allInstancesFrom('OUT_MM') -> select(c | c.getESuperTypes() -> size() <= 0);
--	}
--	to b2 : ATL!StringExp ( 
--		stringSymbol <- classes -> first().getEStructuralFeatures() ->  select (c | c.getEType().name = 'String') -> last().name
--	)	
--}

rule ChangeClassToSuperTypeInOutPatternElement {
	from 
		inOPEBinding : ATL!OutPatternElement
	to
		outOPEBinding : ATL!OutPatternElement(
			varName <- 'NewBinding_PropertyName'
		),
		newOCLType : ATL!OclModelElement(
			model <- inOPEBinding.type.model,
			name <- getSuperTypeOf(inOPEBinding.type.name.toString).name
		)	
}

rule AddBindingReferencePropertyName{
	from a : ATL!StringExp(
		a.stringSymbol = 'NewBinding_PropertyName'	
	)
	using{
		classes2 : Sequence(OUT_MM!EClass) = OUT_MM!EClass.allInstancesFrom('OUT_MM'); -- all classes from out metamodel
		rule1 : IN_ATL!MatchedRule = IN_ATL!MatchedRule.allInstancesFrom('IN_ATL') -> first(); -- first rule from original transformation
		-- class where i can add a reference binding
		-- 1. select all Structural features
		-- 2. filter references
		-- 3. filter non existing references
		-- 4. first
		classToAdd : Sequence(OUT_MM!EClass) = OUT_MM!EClass.allInstancesFrom('OUT_MM')  -- is type1
			-> select(c | c.getEStructuralFeatures() -> exists ( f | f.oclIsTypeOf(OUT_MM!EReference))
				and c.getEStructuralFeatures() -> exists ( f | allBindingsForClass -> forAll( b | b.propertyName <> f.name))
			);
		allBindingsForClass : Sequence(IN_ATL!Binding) = IN_ATL!Binding.allInstancesFrom('IN_ATL');
		-- get name of first non existing binding
		bindingName : OUT_MM!EStructuralFeature = classToAdd -> first().getEStructuralFeatures() -> select (f | allBindingsForClass -> exists(b | b.propertyName = f.name) = false) -> first();
	}
	to a2 : ATL!StringExp ( 
		stringSymbol <- bindingName.name.debug('bname')
	)
	
}

rule AddBindingReferenceValue2{
	from a : ATL!StringExp(
		a.stringSymbol = 'testname'
	)
	using{
		
		classToAdd : Sequence(OUT_MM!EClass) = OUT_MM!EClass.allInstancesFrom('OUT_MM')  -- is type1
			-> select(c | c.getEStructuralFeatures() -> exists ( f | f.oclIsTypeOf(OUT_MM!EReference))
				and c.getEStructuralFeatures() -> exists ( f | allBindingsForClass -> forAll( b | b.propertyName.debug('bindingname') <> f.name.debug('f.name')).debug('forall'))
			);
		allBindingsForClass : Sequence(IN_ATL!Binding) = IN_ATL!Binding.allInstancesFrom('IN_ATL').debug('bindings');
		bindingB : OUT_MM!EStructuralFeature = classToAdd -> first().getEStructuralFeatures() -> select (f | allBindingsForClass -> forAll(b | b.propertyName <> f.name)) -> first();
		typeB : OUT_MM!EClass = bindingB.getEType();

		c : IN_ATL!MatchedRule = IN_ATL!MatchedRule.allInstancesFrom('IN_ATL') -> select(r | r.outPattern.elements -> first().type.name = typeB.name) -> first().debug();--.inPattern.elements -> first().type.name.debug();
		ref : IN_MM!EReference = IN_MM!EReference.allInstancesFrom('IN_MM') -> select(r | r.eReferenceType.name = c.inPattern.elements -> first().type.name) -> first().debug();
		
		
	}
	to a2 : ATL!StringExp(
		stringSymbol <- ref.name
	)
}

rule AddBindingReferenceValue3{
	from a : ATL!StringExp(
		a.stringSymbol = 'testopename'
	)
	using{
		
		classToAdd : Sequence(OUT_MM!EClass) = OUT_MM!EClass.allInstancesFrom('OUT_MM')  -- is type1
			-> select(c | c.getEStructuralFeatures() -> exists ( f | f.oclIsTypeOf(OUT_MM!EReference))
				and c.getEStructuralFeatures() -> exists ( f | allBindingsForClass -> forAll( b | b.propertyName.debug('bindingname') <> f.name.debug('f.name')).debug('forall'))
			);
		allBindingsForClass : Sequence(IN_ATL!Binding) = IN_ATL!Binding.allInstancesFrom('IN_ATL').debug('bindings');
		bindingB : OUT_MM!EStructuralFeature = classToAdd -> first().getEStructuralFeatures() -> select (f | allBindingsForClass -> forAll(b | b.propertyName <> f.name)) -> first();
		typeB : OUT_MM!EClass = bindingB.getEType();

		c : IN_ATL!MatchedRule = IN_ATL!MatchedRule.allInstancesFrom('IN_ATL') -> select(r | r.outPattern.elements -> first().type.name = typeB.name) -> first().debug();--.inPattern.elements -> first().type.name.debug();
		ref : IN_MM!EReference = IN_MM!EReference.allInstancesFrom('IN_MM') -> select(r | r.eReferenceType.name = c.inPattern.elements -> first().type.name) -> first().debug();
		
		
	}
	to a2 : ATL!StringExp(
		stringSymbol <- classToAdd -> first().name
	)
}





	
